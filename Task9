{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7e438d89",
   "metadata": {},
   "source": [
    "Згенегуємо два набори значень $x$ і $y$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "fab206bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = np.random.uniform(0, 100, 100)\n",
    "y = 2 * x + 1 + np.random.randint(0, 25, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "e2c930bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2c5239512a0>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "\n",
    "plt.scatter(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e2dd00",
   "metadata": {},
   "source": [
    "### Завдання."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d7ce08f",
   "metadata": {},
   "source": [
    "Знайти значення коефіцієнтів рівняння лінійної регресії $\\beta_0$ та $\\beta_1$:\n",
    "\n",
    "1) за допомогою формул з підручника;\n",
    "\n",
    "2) за допомогою моделі sklearn.linear_model.LinearRegression;\n",
    "\n",
    "3) знайти передбачення для значення змінної $x$, що рівне 120. "
   ]
  },
  {
   "attachments": {
    "formul.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "4a3da983",
   "metadata": {},
   "source": [
    "![formul.png](attachment:formul.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53e696ec",
   "metadata": {},
   "source": [
    "1) за допомогою формул з підручника:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "46e7c1ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "def regression_coeffs(x, y):\n",
    "    beta_1 = np.cov(x, y)[0][1] / np.var(x)\n",
    "    beta_0 = np.mean(y) - beta_1 * np.mean(x)\n",
    "    return beta_0, beta_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "1a555a7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 2.0016666520222044 * x + 12.97757078427719\n"
     ]
    }
   ],
   "source": [
    "beta_0, beta_1 = regression_coeffs(x, y)\n",
    "\n",
    "print(f\"y = {beta_1} * x + {beta_0}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ff502138",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 1.9816499855019867 * x + 13.967554356531409\n"
     ]
    }
   ],
   "source": [
    "F = np.column_stack((np.ones_like(x), x))\n",
    "A = F.transpose() @ F\n",
    "betas = np.linalg.inv(A) @ F.transpose() @ y.reshape(-1, 1)\n",
    "print(f\"y = {betas[1][0]} * x + {betas[0][0]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd32d86a",
   "metadata": {},
   "source": [
    "2) за допомогою моделі sklearn.linear_model.LinearRegression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "835cb757",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 1.9901731795257664 * x + 13.943966251565556\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "x = x.reshape(-1, 1)\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    x, y, test_size=0.15, random_state=5\n",
    ")\n",
    "\n",
    "mdl = LinearRegression(fit_intercept=True)\n",
    "\n",
    "mdl = mdl.fit(x_train, y_train)\n",
    "\n",
    "print(f\"y = {mdl.coef_[0]} * x + {mdl.intercept_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "3f62ed67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Помилка прогнозу з використанням моделі:  78.70235935377292\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "model_forecast = mdl.predict(x_test)\n",
    "\n",
    "print('Помилка прогнозу з використанням моделі: ', mean_squared_error(y_test, model_forecast))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "46b0cd4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Помилка на навчальних даних:  47.52709082879206\n",
      "Помилка тестових даних:  78.70235935377292\n"
     ]
    }
   ],
   "source": [
    "y_train_forecast = mdl.predict(x_train)\n",
    "\n",
    "print('Помилка на навчальних даних: ', mean_squared_error(y_train, y_train_forecast))\n",
    "print('Помилка тестових даних: ', mean_squared_error(y_test, model_forecast))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b5af9e2",
   "metadata": {},
   "source": [
    "3) знайти передбачення для змінної $x = 120$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "b9551179",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = 120: y = 252.76474779465752\n"
     ]
    }
   ],
   "source": [
    "a = np.array([120]).reshape(-1, 1)\n",
    "\n",
    "model_forecast_a = mdl.predict(a)\n",
    "\n",
    "for i in range(len(model_forecast_a)):\n",
    "    print(f\"x = {a[i][0]}: y = {model_forecast_a[i]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54c4f2ed",
   "metadata": {},
   "source": [
    "Використаємо результати пункту 1) для передбачення:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "7fa337ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1) x = 120: y = 253.1775690269417\n",
      "2) x = 120: y = 251.7655526167698\n"
     ]
    }
   ],
   "source": [
    "prediction_1 = beta_1 * 120 + beta_0\n",
    "prediction_2 = betas[1][0] * 120 + betas[0][0]\n",
    "\n",
    "print(f\"1) x = 120: y = {prediction_1}\")\n",
    "print(f\"2) x = 120: y = {prediction_2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1647557d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
